2.列表**

- 列表 由一系列按特定顺序排列的元素组成。你可以创建包含字母表中所有字母、数字 0~9 或所有家庭成员姓名的列表；也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。鉴于列表通常包含多个元素，给列表指定一个表示复数的名称（如 letters 、 digits 或 names ）是个不错的主意。在 Python 中，用方括号（ [] ）来表示列表，并用逗号来分隔其中的元素

  ```python
  a = ['1', '2', '3', '4']
  print(a)
  
  ['1', '2', '3', '4']
  ```

- 访问列表元素

  列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置或索引告诉 Python 即可。要访问列表元素，可指出列表的名称，再指出元素的索引，并将其放在方括号内

  ```python
  a = ['rng', 'ig', 'edg', 'rw']
  print(a[1])
  print(a[0].title())	#你还可以对任何列表元素调用之前的一些字符串方法。例如，可使用					     方法 title()，upper() 让元素的格式更整洁
  print(a[0].upper())
  
  ig
  Rng
  RNG
  ```

- 索引从 0 而不是 1 开始 , Python 为访问最后一个列表元素提供了一种特殊语法。通过将索引指定为 -1 ，可让 Python 返回最后一个列表元素：

  ```python
  a = ['rng', 'ig', 'edg', 'rw']
  print(a[-1])
  print(a[-2])
  
  rw
  edg
  ```

- 使用列表中的各个值

  ```python
  a = ['rng', 'ig', 'edg', 'rw']
  print("UZI is the " + a[0].upper() + " AD Player!")
  
  UZI is the RNG AD Player!
  ```

- 修改、添加元素

  要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。在列表中添加新元素时，最简单的方式是将元素附加到列表末尾。

  ```python
  a = ['rng', 'ig', 'edg', 'rw']
  b = []
  a[3] = 'we'
  a.append('omg')	#方法 append() 将元素添加到了列表末尾，而不影响列表中的其他所有元素
  b.append('kt')	#方法 append() 让动态地创建列表
  b.append('ssg')
  b.append('kz')
  print(a)
  print(b)
  
  ['rng', 'ig', 'edg', 'we', 'omg']
  ['kt', 'ssg', 'kz']
  ```

- 在列表中插入、删除元素

  ```python
  a = ['rng', 'ig', 'edg', 'rw']
  a.insert(1,'lgd')
  del a[3]	#使用 del 可删除任何位置处的列表元素，条件是知道其索引
  print(a)
  
  ['rng', 'lgd', 'ig', 'rw']
  ```

- 使用方法 pop() 删除元素

  ```python
  a = ['rng', 'ig', 'edg', 'rw']
  b = a.pop()	#方法 pop() 可删除列表末尾的元素，并让你能够接着使用它
  print(a)
  print(b)
  b = a.pop(1)	#使用 pop() 来删除列表中任何位置的元素，只需在括号中指定要删除的元素				   的索引即可
  print(b)
  
  ['rng', 'ig', 'edg']
  rw
  ig
  ```

  别忘了，每当你使用 pop() 时，被弹出的元素就不再在列表中了。
  如果你不确定该使用 del 语句还是 pop() 方法，下面是一个简单的判断标准：如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用 del 语句；如果你要在删除元素后还能继续使用它，就使用方法 pop() 

- 根据值删除元素

  你不知道要从列表中删除的值所处的位置。如果你只知道要删除的元素的值，可使用方法 remove（）

  ```python
  a = ['rng', 'ig', 'edg', 'rw']
  a.remove('edg')
  b = 'rw'
  a.remove(b)
  print(a)
  print(b)
  print("The " + b.upper() + " is too low!")
  #使用 remove() 从列表中删除元素时，也可接着使用它的值。下面删除值，并打印一条消息，指    出要将其从列表中删除的原因
  ['rng', 'ig']
  rw
  The RW is too low!
  ```

- 使用方法 sort()  对列表进行永久性排序

  ```python
  a = ['b', 'd', 'a', 'c']
  a.sort()	#方法 sort() 永久性地修改了列表元素的排列顺序
  print(a)
  a.sort(reverse=True)	#按与字母顺序相反的顺序排列列表元素，为此，只需向 sort() 方						   法传递参数 reverse=True 
  print(a)
  
  ['a', 'b', 'c', 'd']
  ['d', 'c', 'b', 'a']
  ```

- 使用函数 sorted()  对列表进行临时排序

  要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数 sorted() 。函数 sorted() 让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排
  列顺序。

  ```python
  a = ['b', 'd', 'a', 'c']
  print("Here is the original list:")
  print(a)
  print("\nHere is the sorted list:")
  print(sorted(a))
  print("\nHere is the sorted list:")
  print(sorted(a,reverse=True))
  
  Here is the original list:
  ['b', 'd', 'a', 'c']
  
  Here is the sorted list:
  ['a', 'b', 'c', 'd']
  
  Here is the sorted list:
  ['d', 'c', 'b', 'a']
  ```

- 倒着打印列表

  要反转列表元素的排列顺序，可使用方法 reverse() ，注意， reverse() 不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序 , 方法 reverse() 永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用 reverse() 即可

  ```python
  a = ['rng', 'ig', 'edg', 'rw']
  print(a)
  a.reverse()
  print(a)
  a.reverse()
  print(a)
  
  ['rng', 'ig', 'edg', 'rw']
  ['rw', 'edg', 'ig', 'rng']
  ['rng', 'ig', 'edg', 'rw']
  ```

- 确定列表的长度

  注意 　 Python 计算列表元素数时从 1 开始，因此确定列表长度时，你应该不会遇到差一错误

  ```python
  a = ['rng', 'ig', 'edg', 'rw']
  print(len(a))
  
  4
  ```
